#!/usr/bin/env python3
#
# git hook to do various checks/transforms before committing
#
# Can be used as the hook for any/all of:
# - prepare-commit-msg, to preprocess commit messages before editing.
# - applypatch-msg, to sanitise the commit message when using git-am.
# - commit-msg, to post process commit messages after editing.

import os
import sys
from subprocess import getstatusoutput, call, PIPE

def enabled(key):
    cmd = 'git config --get linux.%s' % key
    (rc, output) = getstatusoutput(cmd)
    return (rc == 0 and output == 'true')


lines = open(sys.argv[1], 'r').readlines()

# Rewrite git-cherry-pick style commit markers into the preferred form for
# Linux stable.
#
# ie. (cherry pick from commit abc..) -> commit abc.. upstream
#
# Enable with:
# git config linux.stable-cherry-pick true

if enabled('stable-cherry-pick'):
    import re
    patt = re.compile('^\s*cherry picked from commit ([a-fA-F0-9]+)\s*$')

    i = 0
    while i < len(lines):
        line = lines[i]
        match = patt.match(line)
        if match:
            del(lines[i])
            lines.insert(1, '\ncommit %s upstream.' % match.group(1))
            print("NOTE: rewrote cherry-pick reference into standard format.")
        else:
            i += 1


# Trim non-functional Cc: tags
#
# Enable with:
# git config linux.trim-cc true

if enabled('trim-cc'):
    import re
    patt = re.compile('^\s*(Cc: (.*))\s*$', re.I)

    removed = []
    i = 0
    while i < len(lines):
        line = lines[i]
        match = patt.match(line)
        if match and 'stable@' not in match.group(1):
            removed.append(match.group(1))
            del(lines[i])
        else:
            i += 1

    if len(removed):
        print("NOTE: removed %d superfluous Cc: tags" % len(removed))
        print('\n'.join([('    ' + s) for s in removed]))


# Convert Message-Id tags into Link tags.
#
# Enable with:
# git config linux.convert-message-id true
# git config am.messageid true

if enabled('convert-message-id'):
    import re
    patt = re.compile('^(\s*)Message-Id:\s*<?([^\s>]+)>?\s*$', re.I)

    found = False
    i = 0
    while i < len(lines):
        line = lines[i]
        match = patt.match(line)
        if match:
            found = True
            lines[i] = '%sLink: https://lore.kernel.org/r/%s\n' % match.groups()
        i += 1

    if found:
        print("NOTE: converted Message-Id tag into Link tag.")


# Move Link tags to the end of the change log
#
# Enable with:
# git config linux.link-tag-to-end true

if enabled('link-tag-to-end'):
    import re
    patt = re.compile('^\s*Link:.*$')

    last_non_comment = 0
    links = []
    i = 0
    while i < len(lines):
        line = lines[i]
        match = patt.match(line)
        if match:
            found = True
            del(lines[i])
            links.append(line)
        else:
            i += 1

        if not line.startswith('#'):
            last_non_comment = i - 1

    if links:
        s = lines[last_non_comment]
        if len(s.strip()) == 0:
            s = ''

        lines[last_non_comment] = s + ''.join(links) + '\n'
        print("NOTE: moved Link tag(s) to the end.")


# Check Fixes tags.
#
# Enable with:
# git config linux.check-fixes-tags true

if enabled('check-fixes-tags'):
    import re
    patt = re.compile('^\s*Fixes:?\s*([^\s]+)\s+.*$', re.I)
    strict_patt = re.compile('^\s*Fixes:\s*[a-f0-9]{12,} \("[^"]+"\)\s*$')

    preparing = os.path.basename(sys.argv[0]) == 'prepare-commit-msg'

    i = 0
    while i < len(lines):
        line = lines[i]
        match = patt.match(line)
        i += 1

        if not match:
            continue

        if not strict_patt.match(line):
            msg = "WARNING: Fixes tag on line %d doesn't match correct format" % i
            if preparing:
                lines.insert(i, "# %s\n" % msg)
                i += 1
            print(msg)
            continue

        sha = match.group(1)
        cmd = 'git rev-parse -q --verify %s^{commit}' % sha
        rc = call(cmd.split(), stdout=PIPE)
        if rc != 0:
            msg = "ERROR: couldn't find commit %s referenced in Fixes tag" % sha
            if preparing:
                lines.insert(i, "# %s\n" % msg)
                i += 1
            print(msg)


open(sys.argv[1], 'w').writelines(lines)

sys.exit(0)
