#!/usr/bin/env python3
#
# git hook to do various checks/transforms before committing
#
# Can be used as either or both a prepare-commit-msg hook and as an
# applypatch-msg hook.

import sys
from subprocess import getstatusoutput

def enabled(key):
    cmd = 'git config --get linux.%s' % key
    (rc, output) = getstatusoutput(cmd)
    return (rc == 0 and output == 'true')


lines = open(sys.argv[1], 'r').readlines()

# Rewrite git-cherry-pick style commit markers into the preferred form for
# Linux stable.
#
# ie. (cherry pick from commit abc..) -> commit abc.. upstream
#
# Enable with:
# git config linux.stable-cherry-pick true

if enabled('stable-cherry-pick'):
    import re
    patt = re.compile('^\s*cherry picked from commit ([a-fA-F0-9]+)\s*$')

    for line in lines:
        match = patt.match(line)
        if match:
            lines.remove(line)
            lines.insert(1, '\ncommit %s upstream.\n' % match.group(1))
            break


# Trim non-functional Cc: tags
#
# Enable with:
# git config linux.trim-cc true

if enabled('trim-cc'):
    import re
    patt = re.compile('^\s*(Cc: (.*))\s*$', re.I)

    keep = []
    removed = []
    for line in lines:
        match = patt.match(line)
        if match and 'stable@' not in match.group(1):
            removed.append(match.group(1))
        else:
            keep.append(line)

    if len(removed):
        lines = keep
        print("NOTE: removed %d superfluous Cc: tags" % len(removed))
        print('\n'.join([('    ' + s) for s in removed]))


# Convert Message-Id tags into Link tags and move them to the end of the
# change log.
#
# Enable with:
# git config linux.convert-message-id true
# git config am.messageid true

if enabled('convert-message-id'):
    import re
    patt = re.compile('^(\s*)Message-Id:\s*<?([^\s>]+)>?\s*$', re.I)

    keep = []
    links = []
    for line in lines:
        match = patt.match(line)
        if match:
            links.append('%sLink: https://lore.kernel.org/r/%s\n' % match.groups())
        else:
            keep.append(line)

    if len(links):
        lines = keep + links


open(sys.argv[1], 'w').writelines(lines)

sys.exit(0)
